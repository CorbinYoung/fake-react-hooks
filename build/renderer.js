"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unmount = exports.act = exports.rerender = exports.render = void 0;

var _dataManager = require("./dataManager");

let currentHook = null;
/** Simulates the initial render of a component with a hook
 * @param hook Whatever hook you're wanting to use
 * @param props Any props you would pass to your component
 */

const render = (hook, props) => {
  currentHook = hook;
  return currentHook(props);
};
/** Simulates the "rerender" of a component
 * Make sure that render is called first, otherwise currentHook will be null
 *
 * @param props Any props you would pass to your component
 */


exports.render = render;

const rerender = props => {
  (0, _dataManager.resetCalls)();
  return currentHook(props);
};
/** Simulates the "rerender" of a component generated by the calling of a method from the hook
 * @param hookMethod Some method to update the state of the hook
 * @param props Any props you would pass to your component
 */


exports.rerender = rerender;

const act = (hookMethod, props) => {
  hookMethod();
  (0, _dataManager.resetCalls)();
  return currentHook(props);
};

exports.act = act;

const unmount = () => {
  _dataManager.storage.hasUnmount.filter(v => v !== undefined).forEach(index => _dataManager.storage.data[index][0]()); // Call the unmount method for any hooks that have them


  currentHook = null;
};

exports.unmount = unmount;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXJlci50cyJdLCJuYW1lcyI6WyJjdXJyZW50SG9vayIsInJlbmRlciIsImhvb2siLCJwcm9wcyIsInJlcmVuZGVyIiwiYWN0IiwiaG9va01ldGhvZCIsInVubW91bnQiLCJzdG9yYWdlIiwiaGFzVW5tb3VudCIsImZpbHRlciIsInYiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwiaW5kZXgiLCJkYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsSUFBSUEsV0FBbUMsR0FBRyxJQUExQztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLE1BQU1DLE1BQU0sR0FBRyxDQUFDQyxJQUFELEVBQStCQyxLQUEvQixLQUFpRDtBQUN0RUgsRUFBQUEsV0FBVyxHQUFHRSxJQUFkO0FBQ0EsU0FBT0YsV0FBVyxDQUFDRyxLQUFELENBQWxCO0FBQ0EsQ0FITTtBQUtQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ08sTUFBTUMsUUFBUSxHQUFJRCxLQUFELElBQW1CO0FBQzFDO0FBQ0EsU0FBT0gsV0FBVyxDQUFDRyxLQUFELENBQWxCO0FBQ0EsQ0FITTtBQUtQO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNPLE1BQU1FLEdBQUcsR0FBRyxDQUFDQyxVQUFELEVBQXlCSCxLQUF6QixLQUEyQztBQUM3REcsRUFBQUEsVUFBVTtBQUNWO0FBQ0EsU0FBT04sV0FBVyxDQUFDRyxLQUFELENBQWxCO0FBQ0EsQ0FKTTs7OztBQU1BLE1BQU1JLE9BQU8sR0FBRyxNQUFNO0FBQzVCQyx1QkFBUUMsVUFBUixDQUFtQkMsTUFBbkIsQ0FBMEJDLENBQUMsSUFBSUEsQ0FBQyxLQUFLQyxTQUFyQyxFQUFnREMsT0FBaEQsQ0FBd0RDLEtBQUssSUFBSU4scUJBQVFPLElBQVIsQ0FBYUQsS0FBYixFQUFvQixDQUFwQixHQUFqRSxFQUQ0QixDQUNnRTs7O0FBQzVGZCxFQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNBLENBSE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNldENhbGxzLCBzdG9yYWdlIH0gZnJvbSAnLi9kYXRhTWFuYWdlcic7XG5cbmxldCBjdXJyZW50SG9vazogKHByb3BzOiBvYmplY3QpID0+IGFueSA9IG51bGw7XG5cbi8qKiBTaW11bGF0ZXMgdGhlIGluaXRpYWwgcmVuZGVyIG9mIGEgY29tcG9uZW50IHdpdGggYSBob29rXG4gKiBAcGFyYW0gaG9vayBXaGF0ZXZlciBob29rIHlvdSdyZSB3YW50aW5nIHRvIHVzZVxuICogQHBhcmFtIHByb3BzIEFueSBwcm9wcyB5b3Ugd291bGQgcGFzcyB0byB5b3VyIGNvbXBvbmVudFxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID0gKGhvb2s6IChwcm9wczogb2JqZWN0KSA9PiBhbnksIHByb3BzOiBvYmplY3QpID0+IHtcblx0Y3VycmVudEhvb2sgPSBob29rO1xuXHRyZXR1cm4gY3VycmVudEhvb2socHJvcHMpO1xufTtcblxuLyoqIFNpbXVsYXRlcyB0aGUgXCJyZXJlbmRlclwiIG9mIGEgY29tcG9uZW50XG4gKiBNYWtlIHN1cmUgdGhhdCByZW5kZXIgaXMgY2FsbGVkIGZpcnN0LCBvdGhlcndpc2UgY3VycmVudEhvb2sgd2lsbCBiZSBudWxsXG4gKlxuICogQHBhcmFtIHByb3BzIEFueSBwcm9wcyB5b3Ugd291bGQgcGFzcyB0byB5b3VyIGNvbXBvbmVudFxuICovXG5leHBvcnQgY29uc3QgcmVyZW5kZXIgPSAocHJvcHM6IG9iamVjdCkgPT4ge1xuXHRyZXNldENhbGxzKCk7XG5cdHJldHVybiBjdXJyZW50SG9vayhwcm9wcyk7XG59O1xuXG4vKiogU2ltdWxhdGVzIHRoZSBcInJlcmVuZGVyXCIgb2YgYSBjb21wb25lbnQgZ2VuZXJhdGVkIGJ5IHRoZSBjYWxsaW5nIG9mIGEgbWV0aG9kIGZyb20gdGhlIGhvb2tcbiAqIEBwYXJhbSBob29rTWV0aG9kIFNvbWUgbWV0aG9kIHRvIHVwZGF0ZSB0aGUgc3RhdGUgb2YgdGhlIGhvb2tcbiAqIEBwYXJhbSBwcm9wcyBBbnkgcHJvcHMgeW91IHdvdWxkIHBhc3MgdG8geW91ciBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGFjdCA9IChob29rTWV0aG9kOiAoKSA9PiB2b2lkLCBwcm9wczogb2JqZWN0KSA9PiB7XG5cdGhvb2tNZXRob2QoKTtcblx0cmVzZXRDYWxscygpO1xuXHRyZXR1cm4gY3VycmVudEhvb2socHJvcHMpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVubW91bnQgPSAoKSA9PiB7XG5cdHN0b3JhZ2UuaGFzVW5tb3VudC5maWx0ZXIodiA9PiB2ICE9PSB1bmRlZmluZWQpLmZvckVhY2goaW5kZXggPT4gc3RvcmFnZS5kYXRhW2luZGV4XVswXSgpKTsgLy8gQ2FsbCB0aGUgdW5tb3VudCBtZXRob2QgZm9yIGFueSBob29rcyB0aGF0IGhhdmUgdGhlbVxuXHRjdXJyZW50SG9vayA9IG51bGw7XG59O1xuIl19