import { resetCalls, storage } from './dataManager';

let currentHook = null;

/** Simulates the initial render of a component with a hook
 * @param {function} hook Whatever hook you're wanting to use
 * @param {object} props Any props you would pass to your component
 */
export const render = (hook, props) => {
	currentHook = hook;
	return currentHook(props);
};

/** Simulates the "rerender" of a component
 * Make sure that render is called first, otherwise currentHook will be null
 *
 * @param {object} props Any props you would pass to your component
 */
export const rerender = props => {
	resetCalls();
	return currentHook(props);
};

/** Simulates the "rerender" of a component generated by the calling of a method from the hook
 * @param {function} hookMethod Some method to update the state of the hook
 * @param {object} props Any props you would pass to your component
 */
export const act = (hookMethod, props) => {
	hookMethod();
	resetCalls();
	return currentHook(props);
};

export const unmount = () => {
	storage.hasUnmount.filter(v => v != undefined).forEach(index => storage.data[index][0]()); // Call the unmount method for any hooks that have them
	currentHook = null;
};
