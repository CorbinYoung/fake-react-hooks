import { resetCalls, storage } from './dataManager';

let currentHook: (...params: any[]) => any = null;

/**
 * Simulates the initial render of a component with a hook
 * @param hook Whatever hook you're wanting to use
 * @param params Any parameters you would pass to your hook
 */
export const render = (hook: (...params: any[]) => any, ...params: any[]) => {
  currentHook = hook;
  return currentHook(...params);
};

/**
 * Simulates the "rerender" of a component
 * Make sure that render is called first, otherwise currentHook will be null
 *
 * @param params Any parameters you would pass to your hook
 */
export const rerender = (...params: any[]) => {
  resetCalls();
  return currentHook(...params);
};

/**
 * Simulates the "rerender" of a component generated by the calling of a method from the hook
 * @param hookMethod Some method to update the state of the hook
 * @param params Any parameters you would pass to your hook
 */
export const act = (hookMethod: () => void, ...params: any[]) => {
  hookMethod();
  return rerender(...params);
};

export const unmount = () => {
  // Call the unmount method for any hooks that have them
  storage.hasUnmount.filter(v => v !== undefined).forEach(index => storage.data[index][0]());
  currentHook = null;
};
